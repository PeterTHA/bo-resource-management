generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model departments {
  id          String      @id
  code        String      @unique
  name        String      @unique
  description String?
  created_at  DateTime    @default(now())
  updated_at  DateTime
  employees   employees[]
}

model employees {
  id                                                   String                  @id
  employee_id                                          String                  @unique
  first_name                                           String
  last_name                                            String
  email                                                String                  @unique
  password                                             String
  position                                             String
  department_id                                        String?
  team_id                                              String?
  hire_date                                            DateTime
  role                                                 String                  @default("staff")
  is_active                                            Boolean                 @default(true)
  image                                                String?
  created_at                                           DateTime                @default(now())
  updated_at                                           DateTime
  birth_date                                           DateTime?
  gender                                               String?
  phone_number                                         String?
  position_level                                       String?
  position_title                                       String?
  departments                                          departments?            @relation(fields: [department_id], references: [id])
  teams                                                teams?                  @relation(fields: [team_id], references: [id])
  leave_approvals                                      leave_approvals[]
  leaves                                               leaves[]
  overtime_approvals                                   overtime_approvals[]
  overtimes                                            overtimes[]
  project_activity_logs                                project_activity_logs[]
  project_members                                      project_members[]
  projects                                             projects[]
  work_statuses_work_statuses_created_by_idToemployees work_statuses[]         @relation("work_statuses_created_by_idToemployees")
  work_statuses_work_statuses_employee_idToemployees   work_statuses[]         @relation("work_statuses_employee_idToemployees")
}

model leave_approvals {
  id          String    @id
  leave_id    String
  employee_id String
  type        String
  status      String
  reason      String?
  comment     String?
  created_at  DateTime  @default(now())
  updated_at  DateTime
  employees   employees @relation(fields: [employee_id], references: [id])
  leaves      leaves    @relation(fields: [leave_id], references: [id])
}

model leaves {
  id              String            @id
  employee_id     String
  leave_type      String
  start_date      DateTime
  end_date        DateTime
  reason          String
  status          String            @default("waiting_for_approve")
  created_at      DateTime          @default(now())
  updated_at      DateTime
  leave_format    String            @default("เต็มวัน")
  total_days      Float             @default(0)
  attachments     String[]          @default([])
  leave_approvals leave_approvals[]
  employees       employees         @relation(fields: [employee_id], references: [id])
}

model overtime_approvals {
  id          String    @id
  overtime_id String
  employee_id String
  type        String
  status      String
  reason      String?
  comment     String?
  created_at  DateTime  @default(now())
  updated_at  DateTime
  employees   employees @relation(fields: [employee_id], references: [id])
  overtimes   overtimes @relation(fields: [overtime_id], references: [id])
}

model overtimes {
  id                 String               @id
  employee_id        String
  date               DateTime
  start_time         String
  end_time           String
  total_hours        Float
  reason             String
  status             String               @default("waiting_for_approve")
  created_at         DateTime             @default(now())
  updated_at         DateTime
  overtime_approvals overtime_approvals[]
  employees          employees            @relation(fields: [employee_id], references: [id])
}

model position_levels {
  id          String   @id
  code        String   @unique
  name        String   @unique
  level       Int
  description String?
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model positions {
  id          String   @id
  code        String   @unique
  name        String   @unique
  category    String
  description String?
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model project_activity_logs {
  id          String    @id
  project_id  String
  employee_id String
  action      String
  details     Json
  created_at  DateTime  @default(now())
  employees   employees @relation(fields: [employee_id], references: [id])
  projects    projects  @relation(fields: [project_id], references: [id], onDelete: Cascade)
}

model project_members {
  id            String        @id
  project_id    String
  employee_id   String
  role_id       String
  joined_at     DateTime      @default(now())
  left_at       DateTime?
  is_active     Boolean       @default(true)
  created_at    DateTime      @default(now())
  updated_at    DateTime
  employees     employees     @relation(fields: [employee_id], references: [id])
  projects      projects      @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_roles project_roles @relation(fields: [role_id], references: [id])

  @@unique([project_id, employee_id])
}

model project_roles {
  id              String            @id
  name            String            @unique
  description     String?
  permissions     String[]
  created_at      DateTime          @default(now())
  updated_at      DateTime
  project_members project_members[]
}

model projects {
  id                    String                  @id
  name                  String
  code                  String                  @unique
  description           String?
  start_date            DateTime
  end_date              DateTime?
  status                String                  @default("active")
  priority              String                  @default("medium")
  created_by_id         String
  attachments           String[]                @default([])
  created_at            DateTime                @default(now())
  updated_at            DateTime
  confluence_url        String?
  jira_url              String?
  project_activity_logs project_activity_logs[]
  project_members       project_members[]
  employees             employees               @relation(fields: [created_by_id], references: [id])
}

model teams {
  id          String      @id
  code        String      @unique
  name        String      @unique
  description String?
  created_at  DateTime    @default(now())
  updated_at  DateTime
  employees   employees[]
}

model work_statuses {
  id                                               String    @id
  employee_id                                      String
  date                                             DateTime
  status                                           String    @default("OFFICE")
  note                                             String?
  created_by_id                                    String
  created_at                                       DateTime  @default(now())
  updated_at                                       DateTime
  employees_work_statuses_created_by_idToemployees employees @relation("work_statuses_created_by_idToemployees", fields: [created_by_id], references: [id])
  employees_work_statuses_employee_idToemployees   employees @relation("work_statuses_employee_idToemployees", fields: [employee_id], references: [id])

  @@unique([employee_id, date])
}
