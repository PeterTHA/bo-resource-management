generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Employee {
  id                String      @id @default(uuid())
  employeeId        String      @unique @map("employee_id")
  firstName         String      @map("first_name")
  lastName          String      @map("last_name")
  email             String      @unique
  password          String
  position          String
  departmentId      String?     @map("department_id")
  teamId            String?     @map("team_id")
  hireDate          DateTime    @map("hire_date")
  role              String      @default("staff")
  isActive          Boolean     @default(true) @map("is_active")
  image             String?
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")
  birthDate         DateTime?   @map("birth_date")
  gender            String?
  phoneNumber       String?     @map("phone_number")
  positionLevel     String?     @map("position_level")
  positionTitle     String?     @map("position_title")
  department        Department? @relation(fields: [departmentId], references: [id])
  teamData          Team?       @relation(fields: [teamId], references: [id])
  approvedLeaves    Leave[]     @relation("LeaveApprover")
  cancelApprovedLeaves Leave[]  @relation("LeaveCancelApprover")
  leaves            Leave[]     @relation("EmployeeLeaves")
  approvedOvertimes Overtime[]  @relation("OvertimeApprover")
  overtimes         Overtime[]  @relation("EmployeeOvertimes")
  cancelRequestOvertimes Overtime[] @relation("OvertimeCancelRequester")
  cancelledOvertimes Overtime[] @relation("OvertimeCanceller")
  cancelResponseOvertimes Overtime[] @relation("OvertimeCancelResponder")

  @@map("employees")
}

model Leave {
  id                 String    @id @default(uuid())
  employeeId         String    @map("employee_id")
  leaveType          String    @map("leave_type")
  startDate          DateTime  @map("start_date")
  endDate            DateTime  @map("end_date")
  reason             String
  status             String    @default("รออนุมัติ")
  approvedById       String?   @map("approved_by_id")
  approvedAt         DateTime? @map("approved_at")
  comment            String?
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  attachments        String[]  @default([]) @map("attachments")
  leaveFormat        String    @default("เต็มวัน") @map("leave_format")
  totalDays          Float     @default(0) @map("total_days")
  cancelApprovedAt   DateTime? @map("cancel_approved_at")
  cancelApprovedById String?   @map("cancel_approved_by_id")
  cancelComment      String?   @map("cancel_comment")
  cancelReason       String?   @map("cancel_reason")
  cancelRequestedAt  DateTime? @map("cancel_requested_at")
  cancelStatus       String?   @map("cancel_status")
  isCancelled        Boolean   @default(false) @map("is_cancelled")
  approvedBy         Employee? @relation("LeaveApprover", fields: [approvedById], references: [id])
  cancelApprovedBy   Employee? @relation("LeaveCancelApprover", fields: [cancelApprovedById], references: [id])
  employee           Employee  @relation("EmployeeLeaves", fields: [employeeId], references: [id])

  @@map("leaves")
}

model Overtime {
  id                String    @id @default(uuid())
  employeeId        String    @map("employee_id")
  date              DateTime
  startTime         String    @map("start_time")
  endTime           String    @map("end_time")
  totalHours        Float     @map("total_hours")
  reason            String
  status            String    @default("รออนุมัติ")
  approvedById      String?   @map("approved_by_id")
  approvedAt        DateTime? @map("approved_at")
  comment           String?
  cancelRequestById String?   @map("cancel_request_by_id")
  cancelRequestAt   DateTime? @map("cancel_request_at")
  cancelReason      String?   @map("cancel_reason")
  cancelledById     String?   @map("cancelled_by_id")
  cancelledAt       DateTime? @map("cancelled_at")
  cancelStatus      String?   @map("cancel_status")
  isCancelled       Boolean   @default(false) @map("is_cancelled")
  cancelResponseById String?  @map("cancel_response_by_id")
  cancelResponseAt  DateTime? @map("cancel_response_at")
  cancelResponseComment String? @map("cancel_response_comment")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  approvedBy        Employee? @relation("OvertimeApprover", fields: [approvedById], references: [id])
  employee          Employee  @relation("EmployeeOvertimes", fields: [employeeId], references: [id])
  cancelRequestBy   Employee? @relation("OvertimeCancelRequester", fields: [cancelRequestById], references: [id])
  cancelledBy       Employee? @relation("OvertimeCanceller", fields: [cancelledById], references: [id])
  cancelResponseBy  Employee? @relation("OvertimeCancelResponder", fields: [cancelResponseById], references: [id])

  @@map("overtimes")
}

model Team {
  id          String     @id @default(uuid())
  code        String     @unique
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  employees   Employee[]

  @@map("teams")
}

model Department {
  id          String     @id @default(uuid())
  code        String     @unique
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  employees   Employee[]

  @@map("departments")
}

model Position {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String   @unique
  category    String
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("positions")
}

model PositionLevel {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String   @unique
  level       Int
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("position_levels")
}
