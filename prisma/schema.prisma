generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Employee {
  id                String      @id @default(uuid())
  employeeId        String      @unique @map("employee_id")
  firstName         String      @map("first_name")
  lastName          String      @map("last_name")
  email             String      @unique
  password          String
  position          String
  departmentId      String?     @map("department_id")
  teamId            String?     @map("team_id")
  hireDate          DateTime    @map("hire_date")
  role              String      @default("staff")
  isActive          Boolean     @default(true) @map("is_active")
  image             String?
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")
  birthDate         DateTime?   @map("birth_date")
  gender            String?
  phoneNumber       String?     @map("phone_number")
  positionLevel     String?     @map("position_level")
  positionTitle     String?     @map("position_title")
  department        Department? @relation(fields: [departmentId], references: [id])
  teamData          Team?       @relation(fields: [teamId], references: [id])
  leaves            Leave[]     @relation("EmployeeLeaves")
  leaveApprovals    LeaveApproval[] @relation("EmployeeLeaveApprovals")
  overtimeApprovals OvertimeApproval[] @relation("EmployeeOvertimeApprovals")
  overtimes         Overtime[]  @relation("EmployeeOvertimes")
  workStatuses      WorkStatusRecord[] @relation("EmployeeWorkStatuses")
  createdWorkStatuses WorkStatusRecord[] @relation("WorkStatusCreator")

  @@map("employees")
}

model Leave {
  id                 String    @id @default(uuid())
  employeeId         String    @map("employee_id")
  leaveType          String    @map("leave_type")
  startDate          DateTime  @map("start_date")
  endDate            DateTime  @map("end_date")
  reason             String
  status             String    @default("waiting_for_approve")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  attachments        String[]  @default([]) @map("attachments")
  leaveFormat        String    @default("เต็มวัน") @map("leave_format")
  totalDays          Float     @default(0) @map("total_days")
  isDuringCancel     Boolean   @default(false) @map("is_during_cancel")
  employee           Employee  @relation("EmployeeLeaves", fields: [employeeId], references: [id])
  approvals          LeaveApproval[] @relation("LeaveApprovals")

  @@map("leaves")
}

model LeaveApproval {
  id                 String    @id @default(uuid())
  leaveId            String    @map("leave_id")
  employeeId         String    @map("employee_id")
  type               String    // approve, reject, request_cancel, approve_cancel, reject_cancel
  status             String    // completed, pending
  reason             String?
  comment            String?
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  leave              Leave     @relation("LeaveApprovals", fields: [leaveId], references: [id])
  employee           Employee  @relation("EmployeeLeaveApprovals", fields: [employeeId], references: [id])

  @@map("leave_approvals")
}

model Overtime {
  id                String    @id @default(uuid())
  employeeId        String    @map("employee_id")
  date              DateTime
  startTime         String    @map("start_time")
  endTime           String    @map("end_time")
  totalHours        Float     @map("total_hours")
  reason            String
  status            String    @default("waiting_for_approve")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  employee          Employee  @relation("EmployeeOvertimes", fields: [employeeId], references: [id])
  approvals         OvertimeApproval[] @relation("OvertimeApprovals")

  @@map("overtimes")
}

model OvertimeApproval {
  id                 String    @id @default(uuid())
  overtimeId         String    @map("overtime_id")
  employeeId         String    @map("employee_id")
  type               String    // approve, reject, request_cancel, approve_cancel, reject_cancel
  status             String    // completed, pending
  reason             String?
  comment            String?
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  overtime           Overtime  @relation("OvertimeApprovals", fields: [overtimeId], references: [id])
  employee           Employee  @relation("EmployeeOvertimeApprovals", fields: [employeeId], references: [id])

  @@map("overtime_approvals")
}

model Team {
  id          String     @id @default(uuid())
  code        String     @unique
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  employees   Employee[]

  @@map("teams")
}

model Department {
  id          String     @id @default(uuid())
  code        String     @unique
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  employees   Employee[]

  @@map("departments")
}

model Position {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String   @unique
  category    String
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("positions")
}

model PositionLevel {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String   @unique
  level       Int
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("position_levels")
}

enum WorkStatus {
  OFFICE
  WFH
  MIXED
  OUTSIDE
}

model WorkStatusRecord {
  id          String      @id @default(cuid())
  employeeId  String
  date        DateTime
  status      WorkStatus
  location    String?
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  employee    Employee    @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
  @@index([date])
}
